name: Java CI/CD with Elastic Beanstalk Direct Deployment

on:
  push:
    branches: [ staging ]
  pull_request:
    branches: [ staging ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test

      - name: Generate coverage report
        run: ./gradlew jacocoTestReport

      - name: SonarCloud Scan
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        continue-on-error: true
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: udehnih-auth
          path: build/libs/*.jar

  deploy:
    needs: build
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: udehnih-auth
          path: build/libs/

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Generate timestamp for unique version label
        id: timestamp
        run: echo "timestamp=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Create deployment bundle
        run: |
          # Create necessary configuration files
          mkdir -p .ebextensions
          cat << EOF > .ebextensions/env.config
          option_settings:
            aws:elasticbeanstalk:application:environment:
              SERVER_PORT: 5000
              SPRING_PROFILES_ACTIVE: staging
              DB_HOST: \${DB_HOST}
              DB_PORT: \${DB_PORT}
              DB_NAME: \${DB_NAME}
              DB_USERNAME: \${DB_USERNAME}
              DB_PASSWORD: \${DB_PASSWORD}
              JWT_SECRET_KEY: \${JWT_SECRET_KEY}
              JWT_EXPIRATION: \${JWT_EXPIRATION}
              JWT_REFRESH_EXPIRATION: \${JWT_REFRESH_EXPIRATION}
              LOG_SECURITY_LEVEL: \${LOG_SECURITY_LEVEL}
              LOG_SQL_LEVEL: \${LOG_SQL_LEVEL}
              LOG_SQL_PARAMS_LEVEL: \${LOG_SQL_PARAMS_LEVEL}
              SHOW_SQL: \${SHOW_SQL}
          EOF
          
          echo "web: java -Dserver.port=5000 -jar build/libs/udehnih-auth-0.0.1-SNAPSHOT.jar" > Procfile
          
          zip -r deploy.zip build/libs/udehnih-auth-0.0.1-SNAPSHOT.jar Procfile .ebextensions/

      - name: Deploy to Elastic Beanstalk using EB CLI
        run: |
          pip install awsebcli
          
          mkdir -p ~/.aws
          cat << EOF > ~/.aws/config
          [profile eb-cli]
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}
          region=${{ secrets.AWS_REGION }}
          EOF
          
          VERSION_LABEL="ver-${{ steps.timestamp.outputs.timestamp }}-${GITHUB_SHA::7}"
          
          eb init ${{ secrets.EB_APPLICATION_NAME }} --region ${{ secrets.AWS_REGION }} --platform "64bit Amazon Linux 2023 v4.2.0 running Corretto 21"
          eb deploy ${{ secrets.EB_STAGING_ENVIRONMENT_NAME }} --label ${VERSION_LABEL} --staged    --version-label "${VERSION_LABEL}"